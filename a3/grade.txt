Grade: 28.00/50.00

5 Deduction(s):

--------------
#1: 2.00 points
Failing test: test_vectorize_2: 
        @points=2
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 58, in test_vectorize_2
    0.20)
AssertionError: 0.40000000000000002 != 0.2

source:
    def test_vectorize_2(self):
         """
         @points=2
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance',
                                 ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'romance', ['romance']]], columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         row0 = movies['features'].tolist()[0]
         self.assertEqual(round(max(list(row0.data)), 2),
                             0.20)
         self.assertEqual(round(min(row0.toarray()[0]), 1),
                             0.0)
--------------

--------------
#2: 8.00 points
Failing test: test_can_predict: 
        @points=8
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 114, in test_can_predict
    val = make_predictions(movies, ratings_train, ratings_test)[0]
  File "students/srana6/a3/a3.py", line 238, in make_predictions
    cosineResult=cosine_sim(featureCsrMatrixTest,featureCsrMatrixTrain)
  File "students/srana6/a3/a3.py", line 196, in cosine_sim
    cosineSimResult = np.divide(np.dot(a.toarray(), b.toarray().reshape(22,1)), np.multiply(np.linalg.norm(a.toarray()), np.linalg.norm(b.toarray())))
ValueError: total size of new array must be unchanged

source:
    def test_can_predict(self):
         """
         @points=8
         """
         movies = pd.DataFrame([[123, 'horror|romance', ['horror', 'romance']],
                                [456, 'comedy|horror', ['comedy', 'horror']],
                                [789, 'horror', ['horror']],
                                [000, 'action', ['action']]],
                               columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         ratings_train = pd.DataFrame([
                 [9, 123, 2.5, 1260759144],
                 [9, 456, 3.5, 1260759145],
                 [9, 789, 1, 1260759146],
                 [8, 123, 4.5, 1260759147],
                 [8, 456, 4, 1260759148],
                 [8, 789, 5, 1260759149],
                 [7, 123, 2, 1260759150],
                 [7, 456, 3, 1260759151]],
                                      columns=['userId', 'movieId', 'rating', 'timestamp'])
         ratings_test = pd.DataFrame([
                 [7, 789, 4, 1260759152]],
                                     columns=['userId', 'movieId', 'rating', 'timestamp'])
 
         val = make_predictions(movies, ratings_train, ratings_test)[0]
         self.assertTrue(True)
--------------

--------------
#3: 4.00 points
Failing test: test_cosine_sim_1: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 79, in test_cosine_sim_1
    self.assertEqual(round(cosine_sim(csr_matrix([1,2,3]), csr_matrix([4,-5,6])), 2),
  File "students/srana6/a3/a3.py", line 196, in cosine_sim
    cosineSimResult = np.divide(np.dot(a.toarray(), b.toarray().reshape(22,1)), np.multiply(np.linalg.norm(a.toarray()), np.linalg.norm(b.toarray())))
ValueError: total size of new array must be unchanged

source:
    def test_cosine_sim_1(self):
         """
         @points=4
         """
         self.assertEqual(round(cosine_sim(csr_matrix([1,2,3]), csr_matrix([4,-5,6])), 2),
                          0.37)
--------------

--------------
#4: 4.00 points
Failing test: test_cosine_sim_2: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 86, in test_cosine_sim_2
    self.assertEqual(round(cosine_sim(csr_matrix([1,2,0]), csr_matrix([4,-5,6])), 2),
  File "students/srana6/a3/a3.py", line 196, in cosine_sim
    cosineSimResult = np.divide(np.dot(a.toarray(), b.toarray().reshape(22,1)), np.multiply(np.linalg.norm(a.toarray()), np.linalg.norm(b.toarray())))
ValueError: total size of new array must be unchanged

source:
    def test_cosine_sim_2(self):
         """
         @points=4
         """
         self.assertEqual(round(cosine_sim(csr_matrix([1,2,0]), csr_matrix([4,-5,6])), 2),
                          -0.31)
--------------

--------------
#5: 4.00 points
Failing test: test_predict_2: 
        @points=4
        
Traceback (most recent call last):
  File "../assignments-sol/a3/a3_test.py", line 143, in test_predict_2
    self.assertEqual(round(make_predictions(movies, ratings_train, ratings_test)[0], 1), 2.6)
  File "students/srana6/a3/a3.py", line 238, in make_predictions
    cosineResult=cosine_sim(featureCsrMatrixTest,featureCsrMatrixTrain)
  File "students/srana6/a3/a3.py", line 196, in cosine_sim
    cosineSimResult = np.divide(np.dot(a.toarray(), b.toarray().reshape(22,1)), np.multiply(np.linalg.norm(a.toarray()), np.linalg.norm(b.toarray())))
ValueError: total size of new array must be unchanged

source:
    def test_predict_2(self):
         """
         @points=4
         """
         movies = pd.DataFrame([[123, 'horror|horror|romance|romance|romance', ['horror', 'horror', 'romance', 'romance', 'romance']],
                                [456, 'comedy|horror', ['comedy', 'horror']],
                                [789, 'horror', ['horror']],
                                [000, 'action', ['action']]],
                               columns=['movieId', 'genres', 'tokens'])
         movies = add_titles(movies)
         movies, vocab = featurize(movies)
         ratings_train = pd.DataFrame([
                 [9, 123, 2.5, 1260759144],
                 [9, 456, 3.5, 1260759144],
                 [9, 789, 1, 1260759144],
                 [8, 123, 4.5, 1260759144],
                 [8, 456, 4, 1260759144],
                 [8, 789, 5, 1260759144],
                 [7, 123, 2, 1260759144],
                 [7, 456, 3, 1260759144]],
                                      columns=['userId', 'movieId', 'rating', 'timestamp'])
         ratings_test = pd.DataFrame([
                 [7, 789, 4, 1260759144]],
                                     columns=['userId', 'movieId', 'rating', 'timestamp'])
 
         self.assertEqual(round(make_predictions(movies, ratings_train, ratings_test)[0], 1), 2.6)
--------------

